<?xml version="1.0"?>
<xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="md" source-language="en-US" target-language="fr-fr">
    <header>
      <xliffext:oltranslationpriority xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">ht-test</xliffext:oltranslationpriority>
      <xliffext:olfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3ec43baf1d1c8bef03a22ab0b9f609909c78b48f</xliffext:olfilehash>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-04046aa" tool-company="Microsoft" />
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve">
          <source>Keep the UI thread responsive</source>
          <target state="new">Keep the UI thread responsive</target>
        </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve">
          <source>\[ Updated for UWP apps on Windows 10.</source>
          <target state="new">\[ Updated for UWP apps on Windows 10.</target>
        </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve">
          <source>For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</source>
          <target state="new">For Windows 8.x articles, see the <bpt id="p1">[</bpt>archive<ept id="p1">](http://go.microsoft.com/fwlink/p/?linkid=619132)</ept> \]</target>
        </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve">
          <source>Users expect an app to remain responsive while it does computation, regardless of the type of machine.</source>
          <target state="new">Users expect an app to remain responsive while it does computation, regardless of the type of machine.</target>
        </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve">
          <source>This means different things for different apps.</source>
          <target state="new">This means different things for different apps.</target>
        </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve">
          <source>For some, this translates to providing more realistic physics, loading data from disk or the web faster, quickly presenting complex scenes and navigating between pages, finding directions in a snap, or rapidly processing data.</source>
          <target state="new">For some, this translates to providing more realistic physics, loading data from disk or the web faster, quickly presenting complex scenes and navigating between pages, finding directions in a snap, or rapidly processing data.</target>
        </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve">
          <source>Regardless of the type of computation, users want their app to act on their input and eliminate instances where it appears unresponsive while it "thinks".</source>
          <target state="new">Regardless of the type of computation, users want their app to act on their input and eliminate instances where it appears unresponsive while it "thinks".</target>
        </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve">
          <source>Your app is event-driven, which means that your code performs work in response to an event and then it sits idle until the next.</source>
          <target state="new">Your app is event-driven, which means that your code performs work in response to an event and then it sits idle until the next.</target>
        </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve">
          <source>Platform code for UI (layout, input, raising events, etc.) and your app’s code for UI all are executed on the same UI thread.</source>
          <target state="new">Platform code for UI (layout, input, raising events, etc.) and your app’s code for UI all are executed on the same UI thread.</target>
        </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve">
          <source>Only one instruction can execute on that thread at a time so if your app code takes too long to process an event then the framework can’t run layout or raise new events representing user interaction.</source>
          <target state="new">Only one instruction can execute on that thread at a time so if your app code takes too long to process an event then the framework can’t run layout or raise new events representing user interaction.</target>
        </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve">
          <source>The responsiveness of your app is related to the availability of the UI thread to process work.</source>
          <target state="new">The responsiveness of your app is related to the availability of the UI thread to process work.</target>
        </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve">
          <source>You need to use the UI thread to make almost all changes to the UI thread, including creating UI types and accessing their members.</source>
          <target state="new">You need to use the UI thread to make almost all changes to the UI thread, including creating UI types and accessing their members.</target>
        </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve">
          <source>You can't update the UI from a background thread but you can post a message to it with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher.RunAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</ept> to cause code to be run there.</source>
          <target state="new">You can't update the UI from a background thread but you can post a message to it with <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher.RunAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</ept> to cause code to be run there.</target>
        </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The one exception is that there's a separate render thread that can apply UI changes that won't affect how input is handled or the basic layout.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  The one exception is that there's a separate render thread that can apply UI changes that won't affect how input is handled or the basic layout.</target>
        </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve">
          <source>For example many animations and transitions that don’t affect layout can run on this render thread.</source>
          <target state="new">For example many animations and transitions that don’t affect layout can run on this render thread.</target>
        </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve">
          <source>Delay element instantiation</source>
          <target state="new">Delay element instantiation</target>
        </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve">
          <source>Some of the slowest stages in an app can include startup, and switching views.</source>
          <target state="new">Some of the slowest stages in an app can include startup, and switching views.</target>
        </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve">
          <source>Don't do more work than necessary to bring up the UI that the user sees initially.</source>
          <target state="new">Don't do more work than necessary to bring up the UI that the user sees initially.</target>
        </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve">
          <source>For example, don't create the UI for progressively-disclosed UI and the contents of popups.</source>
          <target state="new">For example, don't create the UI for progressively-disclosed UI and the contents of popups.</target>
        </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve">
          <source>Use <bpt id="p1">[</bpt>x:DeferLoadStrategy<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204785)</ept> to delay-instantiate elements.</source>
          <target state="new">Use <bpt id="p1">[</bpt>x:DeferLoadStrategy<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt204785)</ept> to delay-instantiate elements.</target>
        </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve">
          <source>Programmatically insert elements into the tree on-demand.</source>
          <target state="new">Programmatically insert elements into the tree on-demand.</target>
        </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve">
          <source><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher.RunIdleAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh967918)</ept> queues work for the UI thread to process when it's not busy.</source>
          <target state="new"><bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher.RunIdleAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh967918)</ept> queues work for the UI thread to process when it's not busy.</target>
        </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve">
          <source>Use asynchronous APIs</source>
          <target state="new">Use asynchronous APIs</target>
        </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve">
          <source>To help keep your app responsive, the platform provides asynchronous versions of many of its APIs.</source>
          <target state="new">To help keep your app responsive, the platform provides asynchronous versions of many of its APIs.</target>
        </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve">
          <source>An asynchronous API ensures that your active execution thread never blocks for a significant amount of time.</source>
          <target state="new">An asynchronous API ensures that your active execution thread never blocks for a significant amount of time.</target>
        </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve">
          <source>When you call an API from the UI thread, use the asynchronous version if it's available.</source>
          <target state="new">When you call an API from the UI thread, use the asynchronous version if it's available.</target>
        </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve">
          <source>For more info about programming with <bpt id="p1">**</bpt>async<ept id="p1">**</ept> patterns, see <bpt id="p2">[</bpt>Asynchronous programming<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt187335)</ept> or <bpt id="p3">[</bpt>Call asynchronous APIs in C\# or Visual Basic<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt187337)</ept>.</source>
          <target state="new">For more info about programming with <bpt id="p1">**</bpt>async<ept id="p1">**</ept> patterns, see <bpt id="p2">[</bpt>Asynchronous programming<ept id="p2">](https://msdn.microsoft.com/library/windows/apps/Mt187335)</ept> or <bpt id="p3">[</bpt>Call asynchronous APIs in C\# or Visual Basic<ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Mt187337)</ept>.</target>
        </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve">
          <source>Offload work to background threads</source>
          <target state="new">Offload work to background threads</target>
        </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve">
          <source>Write event handlers to return quickly.</source>
          <target state="new">Write event handlers to return quickly.</target>
        </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve">
          <source>In cases where a non-trivial amount of work needs to be performed, schedule it on a background thread and return.</source>
          <target state="new">In cases where a non-trivial amount of work needs to be performed, schedule it on a background thread and return.</target>
        </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve">
          <source>You can schedule work asynchronously by using the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator in C\#, the <bpt id="p2">**</bpt>Await<ept id="p2">**</ept> operator in Visual Basic, or delegates in C++.</source>
          <target state="new">You can schedule work asynchronously by using the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> operator in C\#, the <bpt id="p2">**</bpt>Await<ept id="p2">**</ept> operator in Visual Basic, or delegates in C++.</target>
        </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve">
          <source>But this doesn't guarantee that the work you schedule will run on a background thread.</source>
          <target state="new">But this doesn't guarantee that the work you schedule will run on a background thread.</target>
        </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve">
          <source>Many of the Universal Windows Platform (UWP) APIs schedule work in the background thread for you, but if you call your app code by using only <bpt id="p1">**</bpt>await<ept id="p1">**</ept> or a delegate, you run that delegate or method on the UI thread.</source>
          <target state="new">Many of the Universal Windows Platform (UWP) APIs schedule work in the background thread for you, but if you call your app code by using only <bpt id="p1">**</bpt>await<ept id="p1">**</ept> or a delegate, you run that delegate or method on the UI thread.</target>
        </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve">
          <source>You have to explicitly say when you want to run your app code on a background thread.</source>
          <target state="new">You have to explicitly say when you want to run your app code on a background thread.</target>
        </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve">
          <source>In C\#C\# and Visual Basic you can accomplish this by passing code to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Task.Run<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.threading.tasks.task.run.aspx)</ept>.</source>
          <target state="new">In C\#C\# and Visual Basic you can accomplish this by passing code to <bpt id="p1">[</bpt><bpt id="p2">**</bpt>Task.Run<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/en-us/library/windows/apps/xaml/system.threading.tasks.task.run.aspx)</ept>.</target>
        </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve">
          <source>Remember that UI elements may only be accessed from the UI thread.</source>
          <target state="new">Remember that UI elements may only be accessed from the UI thread.</target>
        </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve">
          <source>Use the UI thread to access UI elements before launching the background work and/or use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher.RunAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreDispatcher.RunIdleAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh967918)</ept> on the background thread.</source>
          <target state="new">Use the UI thread to access UI elements before launching the background work and/or use <bpt id="p1">[</bpt><bpt id="p2">**</bpt>CoreDispatcher.RunAsync<ept id="p2">**</ept><ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Hh750317)</ept> or <bpt id="p3">[</bpt><bpt id="p4">**</bpt>CoreDispatcher.RunIdleAsync<ept id="p4">**</ept><ept id="p3">](https://msdn.microsoft.com/library/windows/apps/Hh967918)</ept> on the background thread.</target>
        </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve">
          <source>An example of work that can be performed on a background thread is the calculating of computer AI in a game.</source>
          <target state="new">An example of work that can be performed on a background thread is the calculating of computer AI in a game.</target>
        </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve">
          <source>The code that calculates the computer's next move can take a lot of time to execute.</source>
          <target state="new">The code that calculates the computer's next move can take a lot of time to execute.</target>
        </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve">
          <source>[!div class="tabbedCodeSnippets"]</source>
          <target state="new">[!div class="tabbedCodeSnippets"]</target>
        </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve">
          <source>In this example, the <ph id="ph1">`NextMove-Click`</ph> handler returns at the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> in order to keep the UI thread responsive.</source>
          <target state="new">In this example, the <ph id="ph1">`NextMove-Click`</ph> handler returns at the <bpt id="p1">**</bpt>await<ept id="p1">**</ept> in order to keep the UI thread responsive.</target>
        </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve">
          <source>But execution picks up in that handler again after <ph id="ph1">`ComputeNextMove`</ph> (which executes on a background thread) completes.</source>
          <target state="new">But execution picks up in that handler again after <ph id="ph1">`ComputeNextMove`</ph> (which executes on a background thread) completes.</target>
        </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve">
          <source>The remaining code in the handler updates the UI with the results.</source>
          <target state="new">The remaining code in the handler updates the UI with the results.</target>
        </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve">
          <source><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  There's also a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ThreadPool<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR229621)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ThreadPoolTimer<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR229621timer)</ept> API for the UWP, which can be used for similar scenarios.</source>
          <target state="new"><bpt id="p1">**</bpt>Note<ept id="p1">**</ept>  There's also a <bpt id="p2">[</bpt><bpt id="p3">**</bpt>ThreadPool<ept id="p3">**</ept><ept id="p2">](https://msdn.microsoft.com/library/windows/apps/BR229621)</ept> and <bpt id="p4">[</bpt><bpt id="p5">**</bpt>ThreadPoolTimer<ept id="p5">**</ept><ept id="p4">](https://msdn.microsoft.com/library/windows/apps/BR229621timer)</ept> API for the UWP, which can be used for similar scenarios.</target>
        </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve">
          <source>For more info, see <bpt id="p1">[</bpt>Threading and async programming<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187340)</ept>.</source>
          <target state="new">For more info, see <bpt id="p1">[</bpt>Threading and async programming<ept id="p1">](https://msdn.microsoft.com/library/windows/apps/Mt187340)</ept>.</target>
        </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve">
          <source>Related topics</source>
          <target state="new">Related topics</target>
        </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve">
          <source>Custom user interactions</source>
          <target state="new">Custom user interactions</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>